// Generated by CIRCT firtool-1.62.1
module SevSegDisplay(
  input         clock,
                reset,
                io_enable_7seg,
  input  [31:0] io_display_data,
  output [7:0]  io_anode_select,
  output [6:0]  io_segs
);

  reg  [15:0]      anode_prescaler_c_value;
  reg  [2:0]       count;
  wire [7:0]       _GEN = io_enable_7seg ? ~(8'h1 << count) : 8'h1;
  wire [3:0]       digit =
    _GEN == 8'hFE
      ? io_display_data[3:0]
      : _GEN == 8'hFD
          ? io_display_data[7:4]
          : _GEN == 8'hFB
              ? io_display_data[11:8]
              : _GEN == 8'hF7
                  ? io_display_data[15:12]
                  : _GEN == 8'hEF
                      ? io_display_data[19:16]
                      : _GEN == 8'hDF
                          ? io_display_data[23:20]
                          : _GEN == 8'hBF
                              ? io_display_data[27:24]
                              : _GEN == 8'h7F ? io_display_data[31:28] : 4'h0;
  wire [6:0]       _GEN_0 = {3'h0, digit != 4'hE, 3'h6};
  wire [15:0][6:0] _GEN_1 =
    {{_GEN_0},
     {_GEN_0},
     {7'h21},
     {7'h46},
     {7'h3},
     {7'h8},
     {7'h10},
     {7'h0},
     {7'h78},
     {7'h2},
     {7'h12},
     {7'h19},
     {7'h30},
     {7'h24},
     {7'h79},
     {7'h40}};
  always @(posedge clock) begin
    if (reset) begin
      anode_prescaler_c_value <= 16'h0;
      count <= 3'h0;
    end
    else if (reset) begin
      anode_prescaler_c_value <= 16'h0;
      count <= 3'h0;
    end
    else begin
      automatic logic anode_prescaler_wrap_wrap;
      anode_prescaler_wrap_wrap = anode_prescaler_c_value == 16'h9C3F;
      if (io_enable_7seg) begin
        if (anode_prescaler_wrap_wrap)
          anode_prescaler_c_value <= 16'h0;
        else
          anode_prescaler_c_value <= anode_prescaler_c_value + 16'h1;
      end
      if (~reset & io_enable_7seg & anode_prescaler_wrap_wrap)
        count <= count + 3'h1;
    end
  end // always @(posedge)
  assign io_anode_select = _GEN;
  assign io_segs = _GEN_1[digit];
endmodule

